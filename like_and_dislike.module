<?php

/*
 * @file
 * This module provides 2 voting widgets: Like and Dislike. The behavior is
 * similar to Facebook and other social networks, but with negative rating also.
 */

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\Core\Url;

/**
 * Implementing hook_entity_load()
 *
 * Loads the like/dislike information to the entity object
 */
function like_and_dislike_entity_load(array $entities, $entity_type_id) {
  $config = \Drupal::config('like_and_dislike.settings');
  $vote_result_storage = \Drupal::entityManager()->getStorage('vote_result');

  foreach ($entities as $entity) {
    $config_id = $entity->getEntityTypeId() . '_' . $entity->bundle() . '_available';
    if ($config->get($config_id, FALSE)) {
      $like = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'like', 'vote_count'
      );
      $entity->like = !empty($like) ? current($like)->getValue() : 0;
      $dislike = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'dislike', 'vote_count'
      );
      $entity->dislike = !empty($dislike) ? current($dislike)->getValue() : 0;
    }
  }
}

/**
 * Renders the like/dislike buttons if the user has permission to see it
 */
function like_and_dislike_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $config = \Drupal::config('like_and_dislike.settings');
  $enabled_view_modes = ['full'];
  $config_id = $entity->getEntityTypeId() . '_' . $entity->bundle() . '_available';
  if ($config->get($config_id, FALSE)
    && in_array($view_mode, $enabled_view_modes)
  ) {
    $links = [];
    $links['like'] = array(
      'title' => $entity->like . ' Like',
      'url' => Url::fromRoute('like_and_dislike.vote', [
        'entity_type_id' => $entity->getEntityTypeId(),
        'vote_type_id' => 'like',
        'entity_id' => $entity->id(),
        'destination' => drupal_get_destination()['destination']
      ]),
    );
    $links['dislike'] = array(
      'title' => $entity->dislike . ' Dislike',
      'url' => Url::fromRoute('like_and_dislike.vote', [
        'entity_type_id' => $entity->getEntityTypeId(),
        'vote_type_id' => 'dislike',
        'entity_id' => $entity->id(),
        'destination' => drupal_get_destination()['destination']
      ], [
      ]),
    );
    $build['votingapi_links'] = array(
      '#theme' => 'links__votingapi',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }

  //  $Entity = new \Drupal\like_and_dislike\Model\Entity($entity);
  //
  //  if ($Entity->voteIsAvailable()) {
  //    global $user;
  //    $can_vote = $Entity->userCanVote($user);
  //
  //    // Check the voting status based on the permission and if already voted for like or dislike as he can't repeat vote
  //    if ($user->uid == 0) {
  //      $ip = ip_address();
  //      $likestatus = $can_vote ? $Entity->getLikesAmount($user->uid, $ip) : 1;
  //      $dislikestatus = $can_vote ? $Entity->getDislikesAmount($user->uid, $ip) : 1;
  //    }
  //    else {
  //      $likestatus = $can_vote ? $Entity->getLikesAmount($user->uid) : 1;
  //      $dislikestatus = $can_vote ? $Entity->getDislikesAmount($user->uid) : 1;
  //    }
  //
  //    // Don't display the like/dislike if has no permissions to view
  //    if ($can_vote || $Entity->userCanViewVotes()) {
  //      if (isset($entity->like) && isset($entity->dislike)) {
  //        $id = 'like-and-dislike-widget-' . $Entity->entity_type . '-' . $Entity->entity_id;
  //        $like_widget = theme('like', array(
  //          'entity_id' => $Entity->entity_id,
  //          'likes' => $Entity->getLikesAmount(),
  //          'likestatus' => $likestatus,
  //          'entity_type' => $Entity->entity_type,
  //        ));
  //        $dislike_widget = theme('dislike', array(
  //          'entity_id' => $Entity->entity_id,
  //          'dislikes' => $Entity->getDislikesAmount(),
  //          'dislikestatus' => $dislikestatus,
  //          'entity_type' => $Entity->entity_type,
  //        ));
  //        $entity->content['like_and_dislike_widgets'] = array(
  //          '#prefix' => '<div id="' . $id . '" class="like-and-dislike-widget clearfix">',
  //          '#suffix' => '</div>',
  //          '#markup' => $like_widget . $dislike_widget,
  //          '#weight' => 100,
  //        );
  //      }
  //    }
  //  }
  //  return $entity;
}

function like_and_dislike_vote_insert(EntityInterface $vote) {
  switch ($vote->bundle()) {
    case 'like':
      $vote_type_to_delete = 'dislike';
      break;
    case 'dislike':
      $vote_type_to_delete = 'like';
      break;
  }
  $vote_storage = \Drupal::entityManager()->getStorage('vote');
  $vote_storage->deleteUserVotes(
    $vote->getOwnerId(),
    $vote_type_to_delete,
    $vote->getVotedEntityType(),
    $vote->getVotedEntityId()
  );
}
